WITH
  AI_companies AS (
    #Venture capital investment
  WITH
    # table with basic company information
    comp_stage AS (
    SELECT
      * EXCEPT(short_description,
        description),
      CONCAT(short_description,' ', description) AS description
    FROM (
      SELECT
        uuid,
        name,
        cb_url,
        country_code,
        short_description,
        category_list,
        category_groups_list
      FROM
        gcp_cset_crunchbase.organizations )
    LEFT JOIN (
      SELECT
        uuid,
        description
      FROM
        gcp_cset_crunchbase.organization_descriptions)
    USING
      (uuid) ),
    comp AS ( # add CSET AI orgs
    SELECT
      *
    FROM
      comp_stage
    LEFT JOIN (
      SELECT
        CSET_id,
        crunchbase.crunchbase_uuid AS uuid
      FROM
        high_resolution_entities.organizations )
    USING
      (uuid) ),
    add_ipo_tab AS (
    SELECT
      uuid,
      name,
      cb_url,
      country_code,
      category_list,
      category_groups_list,
    IF
      (ipo IS NULL,
        0,
        ipo) AS ipo,
      shared_functions.isAICompany(description) AS ai_company,
    IF
      (category_groups_list LIKE '%Artificial Intelligence%',
        TRUE,
        FALSE) AS ai_category_cb,
    IF
      (CSET_id IS NOT NULL,
        TRUE,
        FALSE) AS cset_ai_org
    FROM
      comp
    LEFT JOIN (
      SELECT
        1 AS ipo,
        org_uuid AS uuid
      FROM
        gcp_cset_crunchbase.ipos)
    USING
      (uuid) ),
    # list of ai_companies based on description
    ai_comp_list AS (
    SELECT
      uuid
    FROM
      add_ipo_tab
    WHERE
      ai_company IS TRUE
      OR ai_category_cb IS TRUE
      OR cset_ai_org IS TRUE ),
    # VC funding rounds target-investor pairs
    funding_round_stage AS (
    SELECT
      target_uuid,
      investor_uuid,
      COUNT(investor_uuid) OVER(PARTITION BY funding_round) AS n_investors,
      raised_amount_usd AS investment_value,
      investment_type,
      funding_round,
      EXTRACT(YEAR
      FROM
        announced_on) AS year
    FROM (
      SELECT
        funding_round_uuid AS funding_round,
        investor_uuid
      FROM
        gcp_cset_crunchbase.investments)
    INNER JOIN (
      SELECT
        uuid AS funding_round,
        org_uuid AS target_uuid,
        raised_amount_usd,
        announced_on,
        investment_type
      FROM
        gcp_cset_crunchbase.funding_rounds)
    USING
      (funding_round) ),
    # add MA target-investor pairs
    # add investor country to staging round
    funding_round AS (
    SELECT
      *
    FROM
      funding_round_stage
    LEFT JOIN (
      SELECT
        uuid AS investor_uuid,
        country_code AS investor_country
      FROM
        gcp_cset_crunchbase.investors)
    USING
      (investor_uuid) ),
    add_mergers AS (
    SELECT
      *
    FROM
      funding_round
    UNION ALL (
      SELECT
        acquiree_uuid AS target_uuid,
        acquirer_uuid AS investor_uuid,
        1 AS n_investors,
        price_usd AS investment_value,
        'merge' AS investment_type,
        CONCAT( acquirer_uuid,acquiree_uuid) AS funding_round,
        EXTRACT(YEAR
        FROM
          acquired_on) AS year,
        acquirer_country_code AS investor_country
      FROM
        gcp_cset_crunchbase.acquisitions) ),
    /* add ai com to investments */ add_ai_to_inv AS (
    SELECT
      *
    FROM ( (
        SELECT
          *
        FROM
          add_mergers a
        FULL JOIN
          add_ipo_tab b
        ON
          a.target_uuid = b.uuid) ) /* where ai_category_cb is True OR ai_company is True OR investment_from_ai_count > 0 OR investment_to_ai_count > 0*/ ),
    distinct_rounds AS (
    SELECT
      DISTINCT target_uuid,
      funding_round,
      investor_uuid,
      investment_value,
      IFNULL(investment_type,
        'missing') AS investment_type,
      uuid,
      name,
      cb_url,
      IFNULL(country_code,
        'missing') AS country_code,
      category_list,
      category_groups_list,
      IFNULL(ipo,
        0) AS ipo,
      IFNULL(ai_company,
        FALSE) AS ai_company,
      cset_ai_org,
      ai_category_cb,
      IFNULL(investor_country,
        'missing') AS investor_country,
      year
    FROM
      add_ai_to_inv ),
    imp_step1 AS (
    SELECT
      * EXCEPT(imputed_investment_value_step),
      IFNULL(investment_value,
        imputed_investment_value_step) AS imputed_investment_value
    FROM (
      SELECT
        *,
        PERCENTILE_CONT(investment_value,
          0.5) OVER(PARTITION BY investment_type, ai_company, ipo, country_code, year) AS imputed_investment_value_step
      FROM
        distinct_rounds ) ),
    imp_step2 AS (
    SELECT
      * EXCEPT(imputed_investment_value,
        imputed_investment_value_step),
      IFNULL(imputed_investment_value,
        imputed_investment_value_step) AS imputed_investment_value
    FROM (
      SELECT
        *,
        PERCENTILE_CONT(investment_value,
          0.5) OVER(PARTITION BY investment_type, ai_company, country_code, year) AS imputed_investment_value_step
      FROM
        imp_step1 ) ),
    imp_step3 AS (
    SELECT
      * EXCEPT(imputed_investment_value,
        imputed_investment_value_step),
      IFNULL(imputed_investment_value,
        imputed_investment_value_step) AS imputed_investment_value
    FROM (
      SELECT
        *,
        PERCENTILE_CONT(investment_value,
          0.5) OVER(PARTITION BY investment_type, ai_company, country_code) AS imputed_investment_value_step
      FROM
        imp_step2 ) ),
    imp_step4 AS (
    SELECT
      * EXCEPT(imputed_investment_value,
        imputed_investment_value_step),
      IFNULL(imputed_investment_value,
        imputed_investment_value_step) AS imputed_investment_value
    FROM (
      SELECT
        *,
        PERCENTILE_CONT(investment_value,
          0.5) OVER(PARTITION BY ai_company, country_code) AS imputed_investment_value_step
      FROM
        imp_step3 ) ),
    imp_step5 AS (
    SELECT
      * EXCEPT(imputed_investment_value,
        imputed_investment_value_step),
      IFNULL(imputed_investment_value,
        imputed_investment_value_step) AS imputed_investment_value
    FROM (
      SELECT
        *,
        PERCENTILE_CONT(investment_value,
          0.5) OVER(PARTITION BY ai_company) AS imputed_investment_value_step
      FROM
        imp_step4 ) ),
    imp_step6 AS (
    SELECT
      * EXCEPT(imputed_investment_value,
        imputed_investment_value_step),
      IFNULL(imputed_investment_value,
        imputed_investment_value_step) AS imputed_investment_value
    FROM (
      SELECT
        *,
        PERCENTILE_CONT(investment_value,
          0.5) OVER() AS imputed_investment_value_step
      FROM
        imp_step5 ) )
  SELECT
    *
  FROM
    imp_step6),
  #make QUAD AI table
  quad_ai AS (
  SELECT
    *
  FROM
    AI_companies
  WHERE
    (cset_ai_org IS TRUE
      OR ai_category_cb IS TRUE)
    AND (country_code = "USA"
      OR country_code = "AUS"
      OR country_code = "JPN"
      OR country_code = "IND"
      OR country_code = "CHN"
      OR country_code = "HKG")
    AND (year >= 2010)
    AND ( investment_type != "missing"
      OR investment_type != "debt_financing"
      OR investment_type != "equity_crowdfunding"
      OR investment_type != "grant"
      OR investment_type != "non_equity_assistance"
      OR investment_type != "post_ipo_debt"
      OR investment_type != "product_crowdfunding")),
  people_tab AS (
  SELECT
    *
  FROM
    gcp-cset-projects.nl522_sandbox.CSETcompanies AS comp
  LEFT JOIN
    `gcp-cset-projects.gcp_cset_crunchbase.people` AS people
  ON
    comp.investor_uuid = people.uuid
  INNER JOIN
    `gcp-cset-projects.gcp_cset_crunchbase.organizations` AS organization
  ON
    people.featured_job_organization_uuid = organization.uuid
  WHERE
    year >= 2010),
  firms_people AS (
  SELECT
    * EXCEPT(investor_country),
    COALESCE(quad_ai.investor_country,
      people_tab.investory_country) AS investor_country
  FROM
    quad_ai
  LEFT JOIN (
    SELECT
      *
    FROM
      people_tab) people_tab
  USING
    (investor_uuid) ),
  combine AS(
    # combine HKG with CHN
  SELECT
    * EXCEPT(investor_country),
  IF
    (investor_country = "HKG",
      "CHN",
      investor_country) AS investor_country
  FROM
    quad_ai)
SELECT
  DISTINCT investment_type,
  name,
  year,
  imputed_investment_value,
  investor_country,
  country_code
FROM
  quad_ai
GROUP BY
  investment_type,
  name,
  year,
  imputed_investment_value,
  investor_country,
  country_code
ORDER BY
  NAME
